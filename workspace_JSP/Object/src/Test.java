/* 결론 : 업캐스팅을 하는 이유는 타형성의 성질을 이용하기 위함이다 
 * 
 * 							→ 다양한 형태의 성질을 지닐 수 있는 것
 * 								예) 메소드 오버로딩, 생성자 오버로딩, 상속관계에서 메소드오버라이딩							
 */
//							public void a(int x){
//								
//							}
//							
//							public void a(int x,int y){
//								
//							}
//							
//							public void a(double x, double y){
//								
//							}
//class 해장국
//간맞추기() 메소드
//→ 출력 : "소금치기"
class 해장국 {
	public void 간맞추기() { // 선언부
		System.out.println("소금치기");
	}
}

// class 뼈다귀해장국 → 해장국 클래스 상속받기
// 오버라이드 단축키 alt + shift + s → v
class 뼈다귀해장국 extends 해장국 {

	@Override
	public void 간맞추기() {// 해장국 붕어클래스의 간맞추기 메소의 선언부를 그대로 가져온다.
		// 구현부 재정의
		System.out.println("뼈다귀해장국에는 들깨가루 넣기");

	}

	// 일반메소드
	public void 뼈추가하기() {
		System.out.println("뼈추가!");
	}

}

class 콩나물해장국 extends 해장국 {

	@Override
	public void 간맞추기() {
		System.out.println("콩나물해장국에 고추가루 넣기");
	}

	// 일반메소드
	public void 콩나물넣기() {
		System.out.println("콩나물!");
	}
}

class 취객 {

	// 업캐스팅성질을 이용
	public void 해장국간맞추기(해장국 무슨해장국) { // 조상 클래스 타입의 참조변수를 선언
		무슨해장국.간맞추기();

	}

	// //매개변수로 전달받은 객체는 그 객체의 클래스형의 참조변수로만 객체를 받을 수 있다.
	// public void 뼈다귀해장국간맞추기(뼈다귀해장국 뼈){
	// 뼈.간맞추기();
	// }
	// //매개변수로 전달받은 객체는 그 객체의 클래스형의 참조변수로만 객체를 받을 수 있다.
	// public void 콩나물해장국간맞추기(콩나물해장국 콩){
	// 콩.간맞추기();
	// }

}

public class Test {

	public static void main(String[] args) {
		취객 취객1 = new 취객();

		해장국 해장국한그릇 = new 뼈다귀해장국(); // 업캐스팅
		취객1.해장국간맞추기(해장국한그릇);

		해장국한그릇 = new 콩나물해장국(); // 업캐스팅
		취객1.해장국간맞추기(해장국한그릇);

		// // 자기자신의 클래스형의 참조변수로 자기자신의 객체 생성하여 저장
		// 뼈다귀해장국 뼈 = new 뼈다귀해장국();
		// 취객1.뼈다귀해장국간맞추기(뼈);
		//
		// 콩나물해장국 콩 = new 콩나물해장국();
		// 취객1.콩나물해장국간맞추기(콩);

	}

}
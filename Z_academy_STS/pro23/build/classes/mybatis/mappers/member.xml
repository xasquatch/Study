<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 		
member.xml파일 전체설명
- 회원 기능과 관련된 sQL문을 설정합니다.
- 먼저 다른 파일의 SQL문과 구별하기 위해 mapper.member로 네임스페이스를 지정하고
	SQL문을 실행 한 후 반환되는 회원정보 레코드를 저장하기 위한  resultMap을 지정합니다.
	각 레코드는 한 개의 MemberVO객체를 생성한 후 지정한 속성에 따라 레코드의 컬럼 값을 저장합니다.
<select>태그의 id속성은 MemberDAO에서 SQL문을 구분해서 호출하는 용도로 사용되며,
반환되는 레코드를 id가 memResult인 resultMap에 저장합니다.
 -->
<mapper namespace="mapper.member">
<!-- SQL문을 실행 한 후 반환되는 검색한 레코드를 <typeAlias>라는 태그에서지정한 memberVO bean에 저장 -->
	<!-- <resultMap type="com.spring.ex01.MemberVO" id="memResult">
		레코드의 컬럼 이름에 대해 memberVO의 같은 속성에 값을 설정함
		<result property="id" column="id"/>
		<result property="pwd" column="pwd"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="joinDate" column="joinDate"/>	
	</resultMap> -->
<!-- SELECT 쿼리 작성: id속성은 DAO에서 id속성 값을 이용해 해당 SQL문을 호출
				resultType은 검색한 결과 레코드를 id속성값이 memResult인 resultMap에 해당하는
				MemberVO에 저장할 아이디 -->
<resultMap type="java.util.HashMap" id="memResult">
	<result property="id" column="id"/>
	<result property="pwd" column="pwd"/>
	<result property="name" column="name"/>
	<result property="email" column="email"/>
	<result property="joinDate" column="joinDate"/>
</resultMap>

<!-- SQL문의 조건연산자(>=,< 등등) xml파일에서 작성하면 연산자가 아닌 특수문자로 인식하므로 오류가 발생
이를 방지하기 위해 <![CDATA[ 'contents'  ]]>와 같이 씀 -->

	<select id="selectAllMemberList" resultMap="memResult">
		<![CDATA[
	    SELECT * FROM t_member ORDER BY joinDate DESC
		]]>
	</select>
	
	<select id="selectName" resultType="String">
		<![CDATA[
			SELECT name FROM t_member WHERE id = 'hong'
		]]>
	</select>
	<select id="selectPwd" resultType="int">
		<![CDATA[
			SELECT pwd FROM t_member WHERE id = 'hong'
		]]>
	</select>
	<select id="selectMemberById" resultType="memberVO" parameterType="String">
		<![CDATA[
			SELECT * FROM t_member WHERE id = #{value}
		]]>
	</select>
	<select id="selectMemberByPwd" resultMap="memResult" parameterType="int">
		<![CDATA[
			SELECT * FROM t_member WHERE pwd = #{value}
		]]>
	</select>
	<insert id="insertMember" parameterType="memberVO">
		<![CDATA[
			INSERT INTO t_member(id,pwd,name,email) VALUES(#{id}, #{pwd}, #{name}, #{email})
		]]>
	</insert>
	<insert id="insertMember2" parameterType="java.util.HashMap">
		<![CDATA[
			INSERT INTO t_member(id, pwd, name, email) VALUES(#{id}, #{pwd}, #{name}, #{email})
		]]>
	</insert>
	<update id="updateMember" parameterType="memberVO">
		<![CDATA[
			UPDATE t_member SET pwd = #{pwd}, name = #{name}, email = #{email} WHERE id = #{id}
		]]>
	</update>
	<delete id="deleteMember" parameterType="string">
		<![CDATA[
			DELETE FROM t_member WHERE id = #{id}
		]]>
	</delete>
	<select id="searchMember" parameterType="memberVO" resultMap="memResult">
		<![CDATA[
			SELECT * FROM t_member WHERE  
		]]>
			<where>
				<if test="name != '' and name != null" >
					name = #{name} 
				</if>
				<if test="email != '' and name != email" >
					email = #{email} 
				</if>
			</where>
			
			ORDER BY joinDate DESC
			
			
	</select>

	<select id="foreachSelect" parameterType="java.util.Map" resultMap="memResult">
		<![CDATA[
			SELECT * FROM t_member
		]]>
		WHERE name in
		<foreach item="item" collection="list" open="(" separator="," close=")">
			#{item}
		</foreach>
	</select>
	
	<insert id="foreachInsert" parameterType="java.util.Map">
		<foreach item="item" collection="list"
				open="INSERT ALL"
				separator=" "
				close="SELECT * FROM DUAL">
				INTO t_member(id, pwd, name, email)
				VALUES(#{item.id}, #{item.pwd}, #{item.name}, #{item.email})
		</foreach>
	</insert>
	
	<!-- ▼ mysql만 가능 
	<insert id="foreachInsert" parameterType="java.util.Map">
		<![CDATA[
			INSERT INTO t_member(id, pwd, name, email) VALUES 
		]]>
		<foreach item="item" collection="list" open="(" separator="," close=")">
			(
			#{item.id},
			#{item.pwd},
			#{item.name},
			#{item.email}
			)
		</foreach>
	</insert>
	 -->
	
</mapper>